<?xml version="1.0"?>
<package >
  <metadata>
    <id>NSelene</id>
    <version>0.0.0.6</version>
    <title>NSelene</title>
    <authors>Iakiv Kramarenko</authors>
    <owners>Iakiv Kramarenko</owners>
    <licenseUrl>https://github.com/yashaka/NSelene/blob/master/LICENSE</licenseUrl>
    <projectUrl>https://github.com/yashaka/NSelene</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>Concise API to Selenium for .Net (the port of Selene in python / Selenide in Java)</description>
    <releaseNotes>
		API changes 
		Should not break anything in this version 
		(because "old names" was just marked as deprecated and will be removed completely in next version):
		- renamed 
		  - Config to Configuration
		  - Browser to SeleneDriver
		  - SElement to SeleneElement
		  - SCollection to SeleneCollection
		  - Utils to Selene
		    to be more "selenide like" (which has com.codeborn.selenide.Selenide class as a container for utility methods)
		    and make name more conceptual
		  - Selene.SActions() to Selene.Actions and make it property
		  - Be.InDOM to Be.InDom (according to standard naming convention)
		- closed access to (made private or internal)
		  - SElement#Actions
		  - SeleneElement and SeleneCollection constructors (internal) 
		    In order to leave ability to rename classes, 
		    if one day we extract SeleneElement or SeleneCollection as interfaces. 
		    It's ok because we do not create their objects via constructors, but via Selene.S or Selene.SS, etc.
		- removed 
		  - SElement#SLocator property
		  
		Breaking changes:
		- Left only the following aliasses: 
		  - SeleneElement: Find, FindAll, Should, ShouldNot; 
		  - SeleneCollection: Should, ShouldNot
		  - SeleneDriver: Find, FindAll
		  Everything else moved to NSelene.Support.Extensions, so to fix code: you have to add additional "using" statement
		  It is recommended though to use these extensions only as "examples", because there are too much of them. 
		  The latter may lead to confusion in usage. Usually the user will need only some of them. 
		  So better to "copy and paste" needed ones to user's project namespace.
		- changed Be.Blank() to Be.Blank (refactored to property);

		New
		- enhanced interoperability with raw selenium. 
		  Now implicit waits for visibility can be added to all PageFactory webelements just via decorating new SDriver(driver); 
		  And all explicit driver calls for finding both IWebElement and IList of IWebElement will produce NSelene proxy alternatives 
		  with both implicit waits for visibility and for indexed webelements of collections.

		Refactoring
		- refactored all "static variable" conditions to be "static properties", which should ensure stability for parallel testing

		License
		- Changed License to "MIT License"
    </releaseNotes>
    <copyright>Copyright (c) 2015-2016 Iakiv Kramarenko</copyright>
    <tags>Selenium Wrapper Web Automation</tags>
    <dependencies>
        <dependency id="Selenium.WebDriver" version="2.53.0"/>
        <dependency id="Selenium.Support" version="2.53.0"/>
    </dependencies>
  </metadata>
  <files>
      <file src="bin/Release/NSelene.dll" target="lib" />
  </files>
</package>
